#!/usr/bin/perl

#	Copyright (c) 2015 by David S. (ds@ironwhale.com)
#	All rights reserved.

#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#   This program reads data from a Dylos DC1100 (Pro) AIQ sensor 
#   I run this as a daemon using the great supervisord

use strict;
use warnings;

use Device::SerialPort;
use LWP::UserAgent;
use Time::Piece;
use JSON;

my $device			= "/dev/ttyUSB0";
my $server_endpoint = "http://pollution.ironwhale.com";
my $logfile			= "/dylos.txt";
my $rrdlogfile		= "/dylos_rrd.txt";

my $source 		= 'dc110pro-home';
if(!-e "/etc/AQI_API_KEY"){
	die("Could not read /etc/AQI_API_KEY");
}

my $api_key 	= `cat /etc/AQI_API_KEY`;
chomp($api_key);

my $debug = 0;
if(-e "/DEBUG"){
	$debug		= 1;
}

my $store_to_file  = 1; # Write to logfile
my $store_to_http  = 0; # Post each to http
my $store_to_http1 = 0; # Post complete log to http hourly, clear log

if($debug){
	print "Debug mode on\n";
}

my $port = Device::SerialPort->new($device) or die("Could not open Serialport!\n");
$port->baudrate(9600);
$port->databits(8);
$port->parity("none");
$port->stopbits(1);
$port->are_match("\n","\r");
$port->write_settings();

my $batch_001 = time();
my $batch_005 = time();
my $batch_015 = time();
my $batch_030 = time();
my $batch_060 = time();
my $batch_120 = time();
my $batch_300 = time();

my $old_small = -1;
my $old_large = -1;
my $small_avg = -1;
my $large_avg = -1;
my $small_total = 0;
my $large_total = 0;
my $avg_counter = 0;

while(1){
	my $input = $port->lookfor();
	my $current_time = time();
	my $remark = "";

	if($current_time - $batch_001 > 60){
		$batch_001 = time();
	} elsif($current_time - $batch_005 > 300){
		$batch_005 = time();
	} elsif($current_time - $batch_015 > 900){
		$batch_015 = time();
	} elsif($current_time - $batch_030 > 1800){
		$batch_030 = time();
	} elsif($current_time - $batch_060 > 3600){
		$batch_060 = time();
	} elsif($current_time - $batch_120 > 7200){
		if(&send_logfile_to_http() == 1){
			&truncate_logfile();
		}
		$batch_120 = time();
	} elsif($current_time - $batch_300 > 18000){
		$batch_300 = time();
	}

	my $timestamp = $current_time;

	if($input){
		chomp($input);
		my ($small, $large) = split(/,/,$input);

		if(!$small =~ /^[0-9]+$/){
			$remark = "Bad small reading ($small) small AVG was $small_avg Counter $avg_counter";
			$small = $small_avg;
		}

		if(!$large =~ /^[0-9]+$/){
			$remark = "Bad large reading ($large) large AVG was $large_avg Counter $avg_counter";
			$large = $large_avg;
		}

		if($old_small == -1){
			$old_small = $small;
		}

		if($old_large == -1){
			$old_large = $large;
		}

		$avg_counter++;
		$small_total += $small;
		$large_total += $large;
		$small_avg = $small_total / $avg_counter;
		$large_avg = $large_total / $avg_counter;

		$small_avg = int($small_avg);
		$large_avg = int($large_avg);

		if($avg_counter eq 100){
			$avg_counter = 0;
			$small_total /= 100;
			$large_total /= 100;
		}

		my $percent_small = &diff_in_percent($small,$old_small);
		my $percent_large = &diff_in_percent($large,$old_large);

		if($large > 1000){
			if($percent_large > 100){
				$remark = "Suspicious reading: S:$small / L:$large";
			}
		}

		if($small > 100){
			if($percent_small > 100){
				$remark = "Suspicious reading: S:$small / L:$large";
			}
		}

		$old_large = $large;
		$old_small = $small;

		if($remark eq ""){
			$remark = "% small: $percent_small % large: $percent_large AVG-COUNT: $avg_counter AVG-S: $small_avg AVG-L: $large_avg";
		} else {
			$remark .= " %small: $percent_small %large: $percent_large AVG-COUNT: $avg_counter AVG-S: $small_avg AVG-L: $large_avg";
		}

		if($debug){
			print "$timestamp,$source,$api_key,$small,$large,$remark\n";
		}

		if($store_to_file){
			open(my $fh, '>>', $logfile) or die "Could not open file '$logfile' $!\n";
			print $fh "$timestamp,$source,$api_key,$small,$large,$remark\n";
			close($fh);

			open($fh, '>', $rrdlogfile) or die "Could not open file '$rrdlogfile' $!\n";
			print $fh "$timestamp,$source,$api_key,$small,$large,$remark\n";
			close($fh);
		}

		if($store_to_http){
			my $ua       = LWP::UserAgent->new();
			my $response = $ua->post( $server_endpoint.'/upload-dylos', { 
				'timestamp'	=> $timestamp,
				'source'    => $source,
				'api_key'   => $api_key,
				'small'     => $small,
				'large'     => $large,
				'remark'	=> $remark
			});
			my $content  = $response->decoded_content();

			if ($response->is_success) {
				my $message = $response->decoded_content;
				if($debug){
					print "Received reply: $message\n";
				}
			} else {
				if($debug){
					print "HTTP POST error code: ", $response->code, "\n";
					print "HTTP POST error message: ", $response->message, "\n";
				}
			}
		}
	}
	$port->lookclear; 
	sleep(1);
}

sub send_logfile_to_http(){
	unless($store_to_http1 eq 1){
		return 1;
	}

	local $/;

	if($debug){
		print "Reading data...\n";
	}
	open(FILEHANDLE, '<', $logfile) or die "Could not open file '$logfile' $!\n";
	my $csv_data = <FILEHANDLE>;
	close(FILEHANDLE);

	if($debug){
		print "Posting data...\n";
	}
	my $ua       = LWP::UserAgent->new();
	my $response = $ua->post( $server_endpoint . "/upload-dylos-batch", { 
		'api_key'	=> $api_key,
		'csv_data'  => $csv_data
	});

	if ($response->is_success) {
		my $message = $response->decoded_content;
		my $message_j = decode_json($message);

		if($message_j->{'status'} eq "OK"){
			return 1;
		} else {
			return 0;
		}
	} else {
		if($debug){
			print "HTTP POST error code: ", $response->code, "\n";
			print "HTTP POST error message: ", $response->message, "\n";
		}
		return 0;
	}
	return 0;
}

sub truncate_logfile(){
	open(FILEHANDLE, '>', $logfile) or die "Could not truncate file '$logfile' $!\n";
	close(FILEHANDLE);
	return 0;
}

sub diff_in_percent($$){
	my $old = shift;
	my $new = shift;

	my $diff = (($new - $old) / $old) * 100;
	$diff = abs($diff);
	return int($diff);
}
